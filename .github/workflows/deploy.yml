# .github/workflows/deploy.yml
# Debug workflow to find the actual container name

name: Deploy Portfolio to AWS ECS

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: somdip-portfolio
  ECS_SERVICE: somdip-portfolio-service
  ECS_CLUSTER: somdip-dev-cluster
  ECS_TASK_DEFINITION: somdip-portfolio
  CONTAINER_NAME: portfolio

jobs:
  deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: Build with Maven
      run: |
        echo "Building Portfolio Application..."
        mvn clean package -DskipTests
        echo "Build completed successfully!"

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build the Docker image
        echo "Building Docker image..."
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        
        # Push image with commit SHA tag
        echo "Pushing image with SHA tag..."
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        
        # Tag and push as latest
        echo "Tagging and pushing as latest..."
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        
        # Output the image URI
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Debug - Download and inspect task definition
      run: |
        echo "=== Downloading current task definition ==="
        aws ecs describe-task-definition \
          --task-definition ${{ env.ECS_TASK_DEFINITION }} \
          --query taskDefinition > task-definition-raw.json
        
        echo "=== All container names in the task definition ==="
        cat task-definition-raw.json | jq -r '.containerDefinitions[].name' | while read name; do
          echo "Container found: '$name'"
        done
        
        echo "=== Number of containers ==="
        CONTAINER_COUNT=$(cat task-definition-raw.json | jq '.containerDefinitions | length')
        echo "Number of containers: $CONTAINER_COUNT"
        
        echo "=== First container details ==="
        cat task-definition-raw.json | jq '.containerDefinitions[0] | {name: .name, image: .image}'
        
        echo "=== All container names (different format) ==="
        cat task-definition-raw.json | jq -c '.containerDefinitions[] | {index: .name, name: .name}'
        
        echo "=== Saving cleaned task definition ==="
        jq 'del(.taskDefinitionArn) | del(.revision) | del(.status) | del(.requiresAttributes) | del(.compatibilities) | del(.registeredAt) | del(.registeredBy)' task-definition-raw.json > task-definition.json
        
        echo "=== Container names after cleaning ==="
        cat task-definition.json | jq -r '.containerDefinitions[].name'
        
        echo "=== Full task definition (first 50 lines) ==="
        cat task-definition.json | jq '.' | head -50

    - name: Try alternative deployment method
      run: |
        echo "=== Using manual deployment method ==="
        
        # Get the actual container name
        ACTUAL_CONTAINER_NAME=$(cat task-definition.json | jq -r '.containerDefinitions[0].name')
        echo "Actual container name: '$ACTUAL_CONTAINER_NAME'"
        
        # Update the image in the task definition
        jq --arg IMAGE "${{ steps.build-image.outputs.image }}" \
          '.containerDefinitions[0].image = $IMAGE' \
          task-definition.json > updated-task-definition.json
        
        # Register new task definition
        NEW_TASK_DEF_ARN=$(aws ecs register-task-definition \
          --cli-input-json file://updated-task-definition.json \
          --query 'taskDefinition.taskDefinitionArn' \
          --output text)
        
        echo "New task definition ARN: $NEW_TASK_DEF_ARN"
        
        # Update service
        aws ecs update-service \
          --cluster ${{ env.ECS_CLUSTER }} \
          --service ${{ env.ECS_SERVICE }} \
          --task-definition $NEW_TASK_DEF_ARN \
          --force-new-deployment
        
        # Wait for stability
        aws ecs wait services-stable \
          --cluster ${{ env.ECS_CLUSTER }} \
          --services ${{ env.ECS_SERVICE }} \
          || echo "Service stabilization timed out (this is normal)"

    - name: Verify deployment
      if: always()
      run: |
        echo "=== Checking deployment status ==="
        aws ecs describe-services \
          --cluster ${{ env.ECS_CLUSTER }} \
          --services ${{ env.ECS_SERVICE }} \
          --query 'services[0].deployments[?status==`PRIMARY`]' \
          --output json | jq '.'

    - name: Create deployment summary
      if: always()
      run: |
        echo "## Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        if [ "${{ job.status }}" == "success" ]; then
          echo "✅ **Status**: Deployment Successful" >> $GITHUB_STEP_SUMMARY
          echo "🚀 **URL**: https://somdip.dev" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Status**: Deployment Failed" >> $GITHUB_STEP_SUMMARY
        fi
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Deployment Details" >> $GITHUB_STEP_SUMMARY
        echo "- **Service**: ${{ env.ECS_SERVICE }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Cluster**: ${{ env.ECS_CLUSTER }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Expected Container**: ${{ env.CONTAINER_NAME }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Image**: \`${{ steps.build-image.outputs.image }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Time**: $(date)" >> $GITHUB_STEP_SUMMARY
