name: Deploy Portfolio to ECS (Optimized)


on:
  push:
    branches: [ main, master ]
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: somdip-portfolio
  ECS_SERVICE: somdip-portfolio-service
  ECS_CLUSTER: somdip-dev-cluster
  ECS_TASK_DEFINITION: somdip-portfolio
  CONTAINER_NAME: portfolio
  LOG_GROUP: /ecs/somdip-portfolio

jobs:
  deploy:
    name: Deploy to ECS
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    # Skip tests in CI for faster deployment
    - name: Build with Maven
      run: mvn clean package -DskipTests

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build and push Docker image
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build and push in one step
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Create task definition
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
        SENDGRID_API_KEY: ${{ secrets.SENDGRID_API_KEY }}
      run: |
        cat > task-definition.json << EOF
        {
          "family": "$ECS_TASK_DEFINITION",
          "networkMode": "awsvpc",
          "requiresCompatibilities": ["FARGATE"],
          "cpu": "256",
          "memory": "1024",
          "executionRoleArn": "arn:aws:iam::257394460825:role/ecsTaskExecutionRole",
          "taskRoleArn": "arn:aws:iam::257394460825:role/ecsTaskRole",
          "containerDefinitions": [
            {
              "name": "$CONTAINER_NAME",
              "image": "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG",
              "portMappings": [
                {
                  "containerPort": 8080,
                  "protocol": "tcp"
                }
              ],
              "essential": true,
              "environment": [
                {"name": "SPRING_PROFILES_ACTIVE", "value": "prod"},
                {"name": "SERVER_PORT", "value": "8080"},
                {"name": "SPRING_PROFILES_ACTIVE", "value": "prod"},
                {"name": "SERVER_PORT", "value": "8080"},
                {"name": "SENDGRID_ENABLED", "value": "true"},
                {"name": "SENDGRID_API_KEY", "value": "$SENDGRID_API_KEY"},
                {"name": "SENDGRID_FROM_EMAIL", "value": "contact@somdip.dev"},
                {"name": "SENDGRID_FROM_NAME", "value": "Somdip Roy Portfolio"},
                {"name": "SENDGRID_TO_EMAIL", "value": "somdiproy.roy@gmail.com"},
                {"name": "SENDGRID_TO_NAME", "value": "Somdip Roy"},
                {"name": "HR_DEMO_HEALTH_STRATEGY", "value": "actuator-health"},
                {"name": "HR_DEMO_EXTERNAL_URL", "value": "https://demos.somdip.dev"},
                {"name": "HR_DEMO_EMBED_URL", "value": "https://demos.somdip.dev"},
                {"name": "JAVA_OPTS", "value": "-XX:MaxRAMPercentage=75.0 -XX:+UseG1GC"},
                {"name": "SINGLE_INSTANCE_MODE", "value": "true"}
              ],
              "logConfiguration": {
                "logDriver": "awslogs",
                "options": {
                  "awslogs-group": "$LOG_GROUP",
                  "awslogs-region": "$AWS_REGION",
                  "awslogs-stream-prefix": "ecs"
                }
              },
              "healthCheck": {
                "command": ["CMD-SHELL", "curl -f http://localhost:8080/actuator/health || exit 1"],
                "interval": 30,
                "timeout": 5,
                "retries": 3,
                "startPeriod": 60
              }
            }
          ]
        }
        EOF

    - name: Register task definition
      id: task-def
      run: |
        TASK_DEF_ARN=$(aws ecs register-task-definition \
          --cli-input-json file://task-definition.json \
          --query 'taskDefinition.taskDefinitionArn' \
          --output text)
        echo "task-def-arn=$TASK_DEF_ARN" >> $GITHUB_OUTPUT

    - name: Update ECS service
      run: |
        aws ecs update-service \
          --cluster $ECS_CLUSTER \
          --service $ECS_SERVICE \
          --task-definition ${{ steps.task-def.outputs.task-def-arn }} \
          --desired-count 1 \
          --deployment-configuration "maximumPercent=200,minimumHealthyPercent=100" \
          --health-check-grace-period-seconds 180 \
          --force-new-deployment

    - name: Wait for deployment
      run: |
        echo "Waiting for deployment to complete..."
        # Wait up to 10 minutes for service to stabilize
        timeout 600 aws ecs wait services-stable \
          --cluster $ECS_CLUSTER \
          --services $ECS_SERVICE \
          || echo "Service did not stabilize in 10 minutes, checking status..."
        
        echo "Deployment status:"
        aws ecs describe-services \
          --cluster $ECS_CLUSTER \
          --services $ECS_SERVICE \
          --query 'services[0].[serviceName,runningCount,desiredCount,deployments[0].status]' \
          --output table

    - name: Verify deployment
      run: |
        # Check if service is running
        RUNNING_COUNT=$(aws ecs describe-services \
          --cluster $ECS_CLUSTER \
          --services $ECS_SERVICE \
          --query 'services[0].runningCount' \
          --output text)
        
        if [ "$RUNNING_COUNT" -eq 1 ]; then
          echo "‚úÖ Deployment successful: 1 task running (single instance mode)"
        else
          echo "‚ùå Deployment failed: Expected 1 task, found $RUNNING_COUNT"
          exit 1
        fi
        
        # Wait for task to be registered in ALB
        echo "Waiting for ALB target registration..."
        sleep 60
        
        # Check ALB target health
        TG_ARN="arn:aws:elasticloadbalancing:us-east-1:257394460825:targetgroup/somdip-dev-portfolio/bb80851d2e2ad190"
        
        HEALTHY_TARGETS=$(aws elbv2 describe-target-health \
          --target-group-arn $TG_ARN \
          --query 'length(TargetHealthDescriptions[?TargetHealth.State==`healthy`])' \
          --output text)
        
        echo "Healthy targets in ALB: $HEALTHY_TARGETS"
        
        if [ "$HEALTHY_TARGETS" -eq 1 ]; then
          echo "‚úÖ Single instance is healthy in the load balancer"
        else
          echo "‚ö†Ô∏è Warning: Instance may need more time to become healthy"
          echo "Current target health:"
          aws elbv2 describe-target-health \
            --target-group-arn $TG_ARN \
            --query 'TargetHealthDescriptions[*].[Target.Id,TargetHealth.State,TargetHealth.Reason]' \
            --output table
        fi
        
    - name: Deployment summary
      run: |
        echo ""
        echo "üöÄ Portfolio Deployment Summary"
        echo "==============================="
        echo "‚úÖ Image: ${{ steps.build-image.outputs.image }}"
        echo "‚úÖ Task Definition: ${{ steps.task-def.outputs.task-def-arn }}"
        echo "‚úÖ Deployment: COMPLETED"
        echo ""
        echo "üìß Email: SendGrid API to somdiproy.roy@gmail.com"
        echo "üí∞ Cost: Single instance mode (saves ~$8-10/month)"
        echo ""
        echo "üîó URLs:"
        echo "   Production: https://somdip.dev"
        echo "   Contact Form: https://somdip.dev/contact"
        echo ""

    - name: Cleanup
      run: rm -f task-definition*.json
