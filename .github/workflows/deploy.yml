name: Deploy Portfolio Service to ECS

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: somdip-portfolio
  ECS_SERVICE: somdip-portfolio-service
  ECS_CLUSTER: somdip-dev-cluster
  ECS_TASK_DEFINITION: somdip-portfolio
  CONTAINER_NAME: portfolio

jobs:
  deploy:
    name: Deploy to ECS
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: Run tests
      run: mvn clean test

    - name: Build with Maven
      run: mvn clean package -DskipTests

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        echo "Building Docker image..."
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
        
        echo "Pushing image with both tags..."
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
        echo "‚úÖ Image pushed: $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

    - name: Download current task definition template
      run: |
        # Get a base task definition to work with
        aws ecs describe-task-definition \
          --task-definition $ECS_TASK_DEFINITION \
          --query taskDefinition > task-definition-base.json
        
        # Clean it up for registration
        cat task-definition-base.json | jq 'del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .placementConstraints, .compatibilities, .registeredAt, .registeredBy)' > task-definition-clean.json
        
        echo "‚úÖ Base task definition downloaded and cleaned"

    - name: Create task definition with SendGrid configuration
      env:
        SENDGRID_API_KEY: ${{ secrets.SENDGRID_API_KEY }}
      run: |
        echo "Creating task definition with complete environment configuration..."
        
        # Verify SendGrid key is available
        if [ -z "$SENDGRID_API_KEY" ]; then
          echo "‚ùå ERROR: SENDGRID_API_KEY secret is not set in GitHub repository"
          echo "Please add it in: Settings ‚Üí Secrets and variables ‚Üí Actions"
          exit 1
        fi
        
        echo "‚úÖ SendGrid API key found in secrets"
        
        # Create task definition with ONLY environment variables (no secrets section)
        cat task-definition-clean.json | jq --arg IMAGE "${{ steps.build-image.outputs.image }}" --arg SENDGRID_KEY "$SENDGRID_API_KEY" '
        .containerDefinitions[0].image = $IMAGE |
        .containerDefinitions[0].environment = [
          {"name": "HR_DEMO_HEALTH_STRATEGY", "value": "actuator-health"},
          {"name": "HR_DEMO_EXTERNAL_URL", "value": "https://demos.somdip.dev"},
          {"name": "HR_DEMO_EMBED_URL", "value": "http://somdip-dev-alb-856223136.us-east-1.elb.amazonaws.com:8081"},
          {"name": "SPRING_PROFILES_ACTIVE", "value": "prod"},
          {"name": "SPRING_MAIL_ENABLED", "value": "true"},
          {"name": "SMTP_HOST", "value": "smtp.sendgrid.net"},
          {"name": "SMTP_PORT", "value": "587"},
          {"name": "SENDGRID_USERNAME", "value": "apikey"},
          {"name": "SENDGRID_API_KEY", "value": $SENDGRID_KEY}
        ] |
        # Remove any existing secrets section to avoid conflicts
        del(.containerDefinitions[0].secrets)
        ' > task-definition-final.json
        
        echo "‚úÖ Task definition created with SendGrid configuration"
        echo "Environment variables configured:"
        cat task-definition-final.json | jq '.containerDefinitions[0].environment[] | select(.name != "SENDGRID_API_KEY") | "\(.name)=\(.value)"' -r
        echo "SENDGRID_API_KEY=***CONFIGURED***"

    - name: Validate task definition
      run: |
        echo "Validating task definition structure..."
        
        # Check that image is set
        IMAGE_CHECK=$(cat task-definition-final.json | jq -r '.containerDefinitions[0].image')
        echo "Image: $IMAGE_CHECK"
        
        # Check that required environment variables are set
        ENV_COUNT=$(cat task-definition-final.json | jq '.containerDefinitions[0].environment | length')
        echo "Environment variables count: $ENV_COUNT"
        
        # Verify no secrets section exists (to avoid conflict)
        SECRETS_EXIST=$(cat task-definition-final.json | jq 'has("secrets") or .containerDefinitions[0] | has("secrets")')
        echo "Secrets section exists: $SECRETS_EXIST"
        
        if [ "$SECRETS_EXIST" = "true" ]; then
          echo "‚ö†Ô∏è  Warning: Secrets section detected - removing to avoid conflicts"
          cat task-definition-final.json | jq 'del(.secrets) | del(.containerDefinitions[0].secrets)' > task-definition-final-clean.json
          mv task-definition-final-clean.json task-definition-final.json
        fi
        
        echo "‚úÖ Task definition validation complete"

    - name: Register new task definition
      id: register-task-def
      run: |
        echo "Registering new task definition..."
        
        # Register the task definition
        NEW_TASK_DEF_ARN=$(aws ecs register-task-definition \
          --cli-input-json file://task-definition-final.json \
          --query 'taskDefinition.taskDefinitionArn' \
          --output text)
        
        if [ $? -eq 0 ]; then
          echo "new-task-def-arn=$NEW_TASK_DEF_ARN" >> $GITHUB_OUTPUT
          echo "‚úÖ New task definition registered: $NEW_TASK_DEF_ARN"
          
          # Get revision number
          REVISION=$(echo $NEW_TASK_DEF_ARN | cut -d: -f6)
          echo "üìù New revision: $REVISION"
        else
          echo "‚ùå Failed to register task definition"
          exit 1
        fi

    - name: Update ECS service
      run: |
        echo "Updating ECS service with new task definition..."
        
        aws ecs update-service \
          --cluster $ECS_CLUSTER \
          --service $ECS_SERVICE \
          --task-definition ${{ steps.register-task-def.outputs.new-task-def-arn }} \
          --desired-count 2 \
          --force-new-deployment \
          --deployment-configuration '{
            "minimumHealthyPercent": 50,
            "maximumPercent": 200,
            "deploymentCircuitBreaker": {
              "enable": false,
              "rollback": false
            }
          }' \
          --query 'service.[serviceName,taskDefinition,desiredCount]' \
          --output table
        
        echo "‚úÖ Service update initiated"

    - name: Monitor deployment progress
      run: |
        echo "Monitoring deployment progress (up to 8 minutes)..."
        
        for i in {1..24}; do  # 8 minutes max
          echo "Check $i/24:"
          
          # Get deployment status
          DEPLOY_STATUS=$(aws ecs describe-services \
            --cluster $ECS_CLUSTER \
            --service $ECS_SERVICE \
            --query 'services[0].deployments[0].status' \
            --output text)
          
          RUNNING_COUNT=$(aws ecs describe-services \
            --cluster $ECS_CLUSTER \
            --service $ECS_SERVICE \
            --query 'services[0].runningCount' \
            --output text)
          
          CURRENT_TASK_DEF=$(aws ecs describe-services \
            --cluster $ECS_CLUSTER \
            --service $ECS_SERVICE \
            --query 'services[0].taskDefinition' \
            --output text)
          
          echo "  Status: $DEPLOY_STATUS"
          echo "  Running: $RUNNING_COUNT/2"
          echo "  Task Def: $(basename $CURRENT_TASK_DEF)"
          
          # Check if deployment completed successfully
          if [ "$DEPLOY_STATUS" = "STABLE" ] && [ "$RUNNING_COUNT" = "2" ]; then
            echo "‚úÖ Deployment completed successfully!"
            break
          fi
          
          # Check if deployment failed
          if [ "$DEPLOY_STATUS" = "FAILED" ]; then
            echo "‚ùå Deployment failed!"
            echo "Recent service events:"
            aws ecs describe-services \
              --cluster $ECS_CLUSTER \
              --service $ECS_SERVICE \
              --query 'services[0].events[:5].[createdAt,message]' \
              --output table
            exit 1
          fi
          
          sleep 20
        done

    - name: Verify final deployment
      run: |
        echo "Final deployment verification..."
        
        # Get current service details
        echo "Service status:"
        aws ecs describe-services \
          --cluster $ECS_CLUSTER \
          --service $ECS_SERVICE \
          --query 'services[0].[serviceName,taskDefinition,runningCount,desiredCount,deployments[0].status]' \
          --output table
        
        # Get running tasks and verify they're using the new image
        echo "Running tasks:"
        TASK_ARNS=$(aws ecs list-tasks \
          --cluster $ECS_CLUSTER \
          --service-name $ECS_SERVICE \
          --query 'taskArns' \
          --output text)
        
        if [ ! -z "$TASK_ARNS" ]; then
          aws ecs describe-tasks \
            --cluster $ECS_CLUSTER \
            --tasks $TASK_ARNS \
            --query 'tasks[*].[containers[0].image,createdAt,lastStatus]' \
            --output table
            
          # Count tasks using new image
          NEW_IMAGE_COUNT=$(aws ecs describe-tasks \
            --cluster $ECS_CLUSTER \
            --tasks $TASK_ARNS \
            --query "length(tasks[?contains(containers[0].image, '${{ github.sha }}')])" \
            --output text)
          
          echo "Tasks using new image (${{ github.sha }}): $NEW_IMAGE_COUNT/2"
        fi

    - name: Test application endpoints
      run: |
        echo "Testing application endpoints..."
        sleep 30  # Wait for ALB to register new targets
        
        # Test main site
        echo "Testing main site (https://somdip.dev):"
        HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" -H "Host: somdip.dev" http://somdip-dev-alb-856223136.us-east-1.elb.amazonaws.com)
        echo "  HTTP Status: $HTTP_STATUS"
        
        # Test health endpoint
        echo "Testing health endpoint:"
        HEALTH_STATUS=$(curl -s -o /dev/null -w "%{http_code}" -H "Host: somdip.dev" http://somdip-dev-alb-856223136.us-east-1.elb.amazonaws.com/actuator/health)
        echo "  Health Status: $HEALTH_STATUS"
        
        if [ "$HTTP_STATUS" = "200" ] && [ "$HEALTH_STATUS" = "200" ]; then
          echo "‚úÖ All endpoints responding correctly!"
        else
          echo "‚ö†Ô∏è  Some endpoints may need more time to become available"
        fi

    - name: Deployment summary
      run: |
        echo ""
        echo "üöÄ Portfolio Deployment Summary"
        echo "==============================="
        echo "‚úÖ New image: ${{ steps.build-image.outputs.image }}"
        echo "‚úÖ Task definition: ${{ steps.register-task-def.outputs.new-task-def-arn }}"
        echo "‚úÖ SendGrid integration: ENABLED"
        echo "‚úÖ Service deployment: COMPLETED"
        echo ""
        echo "üîó URLs to test:"
        echo "   Production: https://somdip.dev"
        echo "   Health: https://somdip.dev/actuator/health"
        echo ""
        echo "üìß SendGrid Configuration:"
        echo "   Mail service: ENABLED"
        echo "   SMTP Host: smtp.sendgrid.net"
        echo "   Monitor emails: https://app.sendgrid.com/email_activity"
        echo ""
        echo "üîÑ Clear browser cache (Ctrl+F5) to see changes!"
        echo "üìß Test contact forms to verify email functionality!"

    - name: Cleanup
      run: |
        rm -f task-definition-*.json
        echo "‚úÖ Temporary files cleaned up"
