# .github/workflows/deploy.yml
# Optimized CI/CD workflow for Portfolio Service with faster deployments

name: Deploy Portfolio to AWS ECS

on:
  push:
    branches:
      - main
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.gitignore'
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: somdip-portfolio
  ECS_SERVICE: somdip-portfolio-service
  ECS_CLUSTER: somdip-dev-cluster
  ECS_TASK_DEFINITION: somdip-portfolio
  CONTAINER_NAME: portfolio

jobs:
  deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: 'maven'

    - name: Build with Maven
      run: |
        echo "🏗️ Building Portfolio Application..."
        mvn clean package -DskipTests -T 1C
        echo "✅ Build completed successfully!"

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build and push Docker image
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        echo "🐳 Building Docker image..."
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        
        echo "📤 Pushing image to ECR..."
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        
        echo "🏷️ Tagging as latest..."
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Download task definition
      run: |
        aws ecs describe-task-definition \
          --task-definition ${{ env.ECS_TASK_DEFINITION }} \
          --query taskDefinition > task-definition.json

    - name: Update task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: task-definition.json
        container-name: ${{ env.CONTAINER_NAME }}
        image: ${{ steps.build-image.outputs.image }}

    - name: Deploy to Amazon ECS
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true
        wait-for-minutes: 5

    - name: Verify deployment
      run: |
        echo "🔍 Verifying deployment..."
        
        # Wait for new task to register with target group
        sleep 20
        
        # Check service status
        SERVICE_STATUS=$(aws ecs describe-services \
          --cluster ${{ env.ECS_CLUSTER }} \
          --services ${{ env.ECS_SERVICE }} \
          --query 'services[0].deployments[?status==`PRIMARY`].[runningCount, desiredCount]' \
          --output text)
        
        RUNNING=$(echo $SERVICE_STATUS | cut -d' ' -f1)
        DESIRED=$(echo $SERVICE_STATUS | cut -d' ' -f2)
        
        if [ "$RUNNING" = "$DESIRED" ]; then
          echo "✅ Deployment successful! $RUNNING/$DESIRED tasks running"
        else
          echo "⚠️ Deployment may still be in progress: $RUNNING/$DESIRED tasks"
        fi
        
        # Quick health check
        ALB_DNS="somdip-dev-alb-856223136.us-east-1.elb.amazonaws.com"
        HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" "http://$ALB_DNS" --max-time 10 || echo "timeout")
        echo "🌐 ALB Response: $HTTP_CODE"

    - name: Cleanup old images
      if: always()
      run: |
        echo "🧹 Cleaning up old ECR images..."
        # Keep only last 10 images
        aws ecr list-images --repository-name ${{ env.ECR_REPOSITORY }} \
          --query 'imageIds[?type(imageTag)!=`null`]|sort_by(@, &imageTag)|[:-10]' \
          --output json | jq '.[] | select(.imageTag != "latest")' | jq -s '.' > images-to-delete.json
        
        if [ -s images-to-delete.json ] && [ "$(cat images-to-delete.json)" != "[]" ]; then
          aws ecr batch-delete-image \
            --repository-name ${{ env.ECR_REPOSITORY }} \
            --image-ids file://images-to-delete.json || true
        fi

    - name: Create deployment summary
      if: always()
      run: |
        echo "# 🚀 Portfolio Deployment Report" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ job.status }}" == "success" ]; then
          echo "## ✅ Status: **DEPLOYED SUCCESSFULLY**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔗 Live Links" >> $GITHUB_STEP_SUMMARY
          echo "- **Production**: https://somdip.dev" >> $GITHUB_STEP_SUMMARY
          echo "- **ALB Direct**: http://somdip-dev-alb-856223136.us-east-1.elb.amazonaws.com" >> $GITHUB_STEP_SUMMARY
        else
          echo "## ❌ Status: **DEPLOYMENT FAILED**" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📊 Deployment Details" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Parameter | Value |" >> $GITHUB_STEP_SUMMARY
        echo "|-----------|-------|" >> $GITHUB_STEP_SUMMARY
        echo "| **Service** | \`${{ env.ECS_SERVICE }}\` |" >> $GITHUB_STEP_SUMMARY
        echo "| **Cluster** | \`${{ env.ECS_CLUSTER }}\` |" >> $GITHUB_STEP_SUMMARY
        echo "| **Container** | \`${{ env.CONTAINER_NAME }}\` |" >> $GITHUB_STEP_SUMMARY
        echo "| **Image** | \`${{ steps.build-image.outputs.image }}\` |" >> $GITHUB_STEP_SUMMARY
        echo "| **Triggered By** | ${{ github.actor }} |" >> $GITHUB_STEP_SUMMARY
        echo "| **Commit** | \`${{ github.sha }}\` |" >> $GITHUB_STEP_SUMMARY
        echo "| **Branch** | \`${{ github.ref_name }}\` |" >> $GITHUB_STEP_SUMMARY
        echo "| **Workflow Run** | [#${{ github.run_number }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}) |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### ⏱️ Deployment Time" >> $GITHUB_STEP_SUMMARY
        echo "Completed at: $(date -u +"%Y-%m-%d %H:%M:%S UTC")" >> $GITHUB_STEP_SUMMARY
