# .github/workflows/deploy.yml
# Optimized CI/CD workflow for Portfolio Service


name: Deploy Portfolio to AWS ECS

on:
  push:
    branches:
      - main
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.gitignore'
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: somdip-portfolio
  ECS_SERVICE: somdip-portfolio-service
  ECS_CLUSTER: somdip-dev-cluster
  ECS_TASK_DEFINITION: somdip-portfolio
  CONTAINER_NAME: portfolio

jobs:
  deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: 'maven'

    - name: Build with Maven
      run: |
        echo "🏗️ Building Portfolio Application..."
        mvn clean package -DskipTests -T 1C
        echo "✅ Build completed successfully!"

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build and push Docker image
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        echo "🐳 Building Docker image..."
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        
        echo "📤 Pushing image to ECR..."
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        
        echo "🏷️ Tagging as latest..."
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Download task definition
      run: |
        aws ecs describe-task-definition \
          --task-definition ${{ env.ECS_TASK_DEFINITION }} \
          --query taskDefinition > task-definition.json

    - name: Update task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: task-definition.json
        container-name: ${{ env.CONTAINER_NAME }}
        image: ${{ steps.build-image.outputs.image }}

    - name: Deploy to Amazon ECS
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: false

    - name: Wait for service stability with monitoring
      run: |
        echo "⏳ Waiting for service to stabilize..."
        
        # Custom wait logic with better monitoring
        MAX_ATTEMPTS=20
        ATTEMPT=0
        
        while [ $ATTEMPT -lt $MAX_ATTEMPTS ]; do
          ATTEMPT=$((ATTEMPT + 1))
          echo "🔄 Check $ATTEMPT/$MAX_ATTEMPTS..."
          
          # Get deployment status
          DEPLOYMENT_INFO=$(aws ecs describe-services \
            --cluster ${{ env.ECS_CLUSTER }} \
            --services ${{ env.ECS_SERVICE }} \
            --query 'services[0].deployments[?status==`PRIMARY`]' \
            --output json)
          
          RUNNING_COUNT=$(echo "$DEPLOYMENT_INFO" | jq -r '.[0].runningCount // 0')
          DESIRED_COUNT=$(echo "$DEPLOYMENT_INFO" | jq -r '.[0].desiredCount // 0')
          ROLLOUT_STATE=$(echo "$DEPLOYMENT_INFO" | jq -r '.[0].rolloutState // "IN_PROGRESS"')
          
          echo "📊 Status: Running=$RUNNING_COUNT/$DESIRED_COUNT, State=$ROLLOUT_STATE"
          
          if [ "$ROLLOUT_STATE" = "COMPLETED" ] && [ "$RUNNING_COUNT" -eq "$DESIRED_COUNT" ] && [ "$RUNNING_COUNT" -gt 0 ]; then
            echo "✅ Service is stable!"
            break
          elif [ "$ROLLOUT_STATE" = "FAILED" ]; then
            echo "❌ Deployment failed!"
            
            # Show recent events
            aws ecs describe-services \
              --cluster ${{ env.ECS_CLUSTER }} \
              --services ${{ env.ECS_SERVICE }} \
              --query 'services[0].events[:3]' \
              --output table
            exit 1
          fi
          
          if [ $ATTEMPT -lt $MAX_ATTEMPTS ]; then
            sleep 15
          fi
        done

    - name: Verify deployment
      run: |
        echo "🔍 Verifying deployment..."
        
        # Check service status
        SERVICE_STATUS=$(aws ecs describe-services \
          --cluster ${{ env.ECS_CLUSTER }} \
          --services ${{ env.ECS_SERVICE }} \
          --query 'services[0].{Status:status,Running:runningCount,Desired:desiredCount}' \
          --output json)
        
        echo "Service Status:"
        echo "$SERVICE_STATUS" | jq .
        
        # Check target health
        TARGET_GROUP_ARN="arn:aws:elasticloadbalancing:us-east-1:257394460825:targetgroup/somdip-dev-portfolio/bb80851d2e2ad190"
        
        echo "Target Health:"
        aws elbv2 describe-target-health \
          --target-group-arn $TARGET_GROUP_ARN \
          --query 'TargetHealthDescriptions[*].{Target:Target.Id,Health:TargetHealth.State}' \
          --output table || echo "Could not retrieve target health"
        
        # Quick HTTP check
        sleep 10
        HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" "https://somdip.dev" --max-time 10 || echo "timeout")
        echo "🌐 Website Response: $HTTP_CODE"

    - name: Cleanup old images
      if: success()
      continue-on-error: true
      run: |
        echo "🧹 Cleaning up old ECR images..."
        
        # Keep only last 10 images
        IMAGES_TO_DELETE=$(aws ecr describe-images \
          --repository-name ${{ env.ECR_REPOSITORY }} \
          --query 'sort_by(imageDetails[?imageTag!=`latest`],& imagePushedAt)[:-10].imageDigest' \
          --output json)
        
        if [ "$IMAGES_TO_DELETE" != "[]" ] && [ "$IMAGES_TO_DELETE" != "null" ]; then
          echo "$IMAGES_TO_DELETE" | jq -r '.[]' | while read digest; do
            aws ecr batch-delete-image \
              --repository-name ${{ env.ECR_REPOSITORY }} \
              --image-ids imageDigest=$digest || true
          done
        fi

    - name: Create deployment summary
      if: always()
      run: |
        echo "# 🚀 Portfolio Deployment Report" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ job.status }}" == "success" ]; then
          echo "## ✅ Status: **DEPLOYED SUCCESSFULLY**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔗 Live Links" >> $GITHUB_STEP_SUMMARY
          echo "- **Production**: https://somdip.dev" >> $GITHUB_STEP_SUMMARY
          echo "- **AI Demos**: https://demos.somdip.dev" >> $GITHUB_STEP_SUMMARY
        else
          echo "## ⚠️ Status: **DEPLOYMENT ISSUES**" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📊 Deployment Details" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Parameter | Value |" >> $GITHUB_STEP_SUMMARY
        echo "|-----------|-------|" >> $GITHUB_STEP_SUMMARY
        echo "| **Service** | \`${{ env.ECS_SERVICE }}\` |" >> $GITHUB_STEP_SUMMARY
        echo "| **Cluster** | \`${{ env.ECS_CLUSTER }}\` |" >> $GITHUB_STEP_SUMMARY
        echo "| **Container** | \`${{ env.CONTAINER_NAME }}\` |" >> $GITHUB_STEP_SUMMARY
        echo "| **Image Tag** | \`${{ github.sha }}\` |" >> $GITHUB_STEP_SUMMARY
        echo "| **Triggered By** | @${{ github.actor }} |" >> $GITHUB_STEP_SUMMARY
        echo "| **Workflow Run** | [#${{ github.run_number }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}) |" >> $GITHUB_STEP_SUMMARY
