name: Deploy Portfolio to ECS

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
    types: [ closed ]

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: somdip-portfolio
  ECS_SERVICE: somdip-portfolio-service
  ECS_CLUSTER: somdip-dev-cluster
  ECS_TASK_DEFINITION: somdip-portfolio
  CONTAINER_NAME: portfolio

jobs:
  deploy:
    name: Deploy to ECS
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.merged == true)

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: Run tests
      run: mvn clean test

    - name: Build with Maven
      run: mvn clean package -DskipTests

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build a docker container and push it to ECR
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
        
        echo "Pushing image with tags: $IMAGE_TAG and latest"
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Download current task definition
      run: |
        aws ecs describe-task-definition \
          --task-definition $ECS_TASK_DEFINITION \
          --query taskDefinition > task-definition.json
        
        echo "Current task definition downloaded"
        cat task-definition.json | jq '.containerDefinitions[0].image'

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: task-definition.json
        container-name: ${{ env.CONTAINER_NAME }}
        image: ${{ steps.build-image.outputs.image }}

    - name: Deploy Amazon ECS task definition
      id: deploy
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true
        wait-for-minutes: 10
        force-new-deployment: true

    - name: Update ECS service to ensure desired count
      run: |
        echo "Ensuring service has correct desired count..."
        aws ecs update-service \
          --cluster $ECS_CLUSTER \
          --service $ECS_SERVICE \
          --desired-count 2 \
          --query 'service.[serviceName,desiredCount,runningCount]' \
          --output table

    - name: Verify deployment
      run: |
        echo "Verifying deployment..."
        
        # Wait for deployment to stabilize
        aws ecs wait services-stable \
          --cluster $ECS_CLUSTER \
          --services $ECS_SERVICE
        
        # Get service details
        aws ecs describe-services \
          --cluster $ECS_CLUSTER \
          --services $ECS_SERVICE \
          --query 'services[0].[serviceName,taskDefinition,runningCount,desiredCount,deployments[0].status]' \
          --output table
        
        # Get running tasks
        TASK_ARNS=$(aws ecs list-tasks \
          --cluster $ECS_CLUSTER \
          --service-name $ECS_SERVICE \
          --query 'taskArns' \
          --output text)
        
        if [ ! -z "$TASK_ARNS" ]; then
          echo "Running tasks:"
          aws ecs describe-tasks \
            --cluster $ECS_CLUSTER \
            --tasks $TASK_ARNS \
            --query 'tasks[*].[taskArn,lastStatus,healthStatus,containers[0].image]' \
            --output table
        fi
        
        # Test the deployment
        echo "Testing deployment..."
        ALB_DNS="somdip-dev-alb-856223136.us-east-1.elb.amazonaws.com"
        
        # Test direct ALB access
        HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" -H "Host: somdip.dev" http://$ALB_DNS)
        echo "HTTP Status from ALB: $HTTP_STATUS"
        
        if [ "$HTTP_STATUS" = "200" ]; then
          echo "‚úÖ Deployment successful! Site is responding."
        else
          echo "‚ùå Deployment may have issues. HTTP Status: $HTTP_STATUS"
          exit 1
        fi

    - name: Deployment Summary
      run: |
        echo "üöÄ Portfolio Deployment Complete"
        echo "================================"
        echo "Image: ${{ steps.build-image.outputs.image }}"
        echo "Task Definition: Updated"
        echo "Service: $ECS_SERVICE"
        echo "Cluster: $ECS_CLUSTER"
        echo "Expected Tasks: 2"
        echo "Site: https://somdip.dev"
        echo "Direct ALB: http://somdip-dev-alb-856223136.us-east-1.elb.amazonaws.com"
        echo ""
        echo "üîç Verify your changes are live at: https://somdip.dev"
